Git功能：
        1.版本控制。能够回退之前的版本
        2.多人协作
        
        
分布式版本控制：
    与分布式版本控制相对应的是集中式版本控制，所有协作的人要从一个中央服务器把代码拷贝下来，工作完成后再Push回去。也就是只要中央服务器才有整个代          码的完整备份。这样做一个缺点是传输太慢，每次工作都要拷贝下来，传输回去，另一个缺点是不安全，依赖于中央服务器。
分布式版本控制在每个电脑上都有整个代码的完整备份，工作的时候不必实现从中央服务器拷贝下来，但是工作完成后merge的时候，不同的电脑不是直接互相推送彼此的修改，而是也有一个‘中央服务器’，这个‘中央服务器’仅仅是为了便于互相推送代码。


repository:
    版本库，又叫仓库。像是一个笔记本，记录你对项目的修改，便于随时回退。
    在一个空文件夹下面，git init就创建了一个空的仓库。此时这个仓库还没有任何内容，你的笔记本也是空空如也，无论写了什么代码，做了何种修改，添加进仓库都需要两步，git add 、git commit.
    

修改与提交：
    修改一个文件后，可以用git status查看此时版本库的状态，如果存在了修改且尚未提交的文件，会有相应的提示：no changes added to commit (use "git add" and/or "git commit -a")。此时也可以使用git diff查看了有哪些修改尚未提交，确认了修改无误后，就可以按照git add git commit的步骤提交修改。此时再查看git status，提示如下‘On branch master nothing to commit, working tree clean’。
    
    
日志查看与恢复之前的版本：
    git log可以查看所有对文件修改的记录，记录按照时间排序，最下面的是最近的记录。每一条记录都有一个commit id。这个id不是按照1 2 3顺序来的，因为git是一个分布式版本控制，如果按照1、2、3的顺序来，合并的时候肯定会有冲突。
    git reset 用于回退到之前的版本。 HEAD表示当前版本，HEAD^表示当前版本之前的一个版本，按照git log里显示的顺序。输入 git reset --hard HEAD^后回复到了之前的版本，此时查看git log，发现HEAD对应的版本不见了，好比你穿梭到了过去，确无法回到当下。此时输入 git reflog，reflog用于记录每一次的命令，每一个commit前面的commit id，就是你穿梭时空的地址，此时可见commit的时候写注释的重要性。
    

暂存区：
    每次做的修改要先add到暂存区，等所有修改结束后，一次性commit到分支上。
    

撤销工作区修改：
    当对工作区的文件进行了改动后，如果想撤销修改，可以使用git check -- file命令。会撤销修改回退到之前的一个状态，但是具体回退到哪一个状态，有所不同。
    如果修改后没有add 进入暂存区，撤销修改可以回退到和版本库一样的状态，如果已经add进了暂存区，再次撤销修改，回退到暂存区的状态
    
    
撤销暂存区修改：
    工作区发生改动，并且add到了暂存区，此时想撤销暂存区和工作区的改动。
    输入git status ，发现如下提示
    On branch master
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        modified:   readme.txt
它告诉我们暂存区有东西没有提交，首先按照提示的操作，取消暂存区的内容。git reset HEAD 
再次查看git status,
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt
    发现暂存区的内容已经被抹去，输入git checkout -- 可以回退到与版本库相同的状态。
    
    
删除文件：
    从工作区删除文件后，如果想恢复删除，可以使用git checkout --,这是在没有add进暂存区的前提下，可以恢复。如果add进了暂存区，并且之前的记录没有commit，那么就找不回来了。所以每次写了文件还是要commit上去的好。
    
    
